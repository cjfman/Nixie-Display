#! /usr/bin/python3
##pylint: disable=wrong-import-position

import argparse
import sys
import time
import os

from pyxielib import assembler, controller, program, scheduler, usermenuprogram

file_dir = os.path.dirname(os.path.realpath(__file__))

parser = argparse.ArgumentParser(description='Nixie tube controller')
parser.add_argument('-c', '--controller', required=True, help="The type of controller <terminal,raspi,serial>")
parser.add_argument('-p', '--print-code', action='store_true', help="Print the code to the output")
parser.add_argument('-s', '--serial', help="The serial device path. Overrides --controller")
parser.add_argument('-v', '--verbose', action='store_true', help="Be verbose in output")
parser.add_argument('--keyboard-event-file', help="The /dev/input/event file that represents keyboard input")
parser.add_argument('--animations-dir', default=os.path.join(file_dir, 'animations'), help="Directory of animations files")
args = parser.parse_args()


## Fix controler argument
if args.serial is not None:
    args.controller = 'serial'
else:
    args.controller = args.controller.lower()


## Create controller
ctrl = None
if args.controller == 'terminal':
    ctrl = controller.TerminalController(clear_screen=True, print_code=args.print_code)
elif args.controller == 'raspi':
    print("Using the RaspberryPi outputs directly")
    ctrl = controller.RaspberryPiController(speed=10**6, debug=args.verbose, print_code=args.print_code)
elif args.controller == 'serial':
    print("Opening connection to Nixie Control Board")
    ctrl = controller.SerialController(args.serial, debug=args.verbose)
    print("Connection established")
else:
    print(f"Unsupported controller type: {args.controller}")
    sys.exit(1)


clock_prgm = program.ClockProgram(flash=True, underscore=True)
nyt_prgm = program.RssProgram("https://rss.nytimes.com/services/xml/rss/nyt/US.xml", size=16)
weather_prgm = program.WeatherProgram(nws_code="KBOS")
user_prgm = None
if args.keyboard_event_file is not None:
    user_prgm = usermenuprogram.UserMenuProgram(args.keyboard_event_file, ani_path=args.animations_dir)

schl = (
    ("*/5 * * * *",  1, clock_prgm),
    ("*/20 * * * *", 3, nyt_prgm),
    ("*/15 * * * *", 2, weather_prgm),
)

asmlr = assembler.Assembler(controller=ctrl)
schdlr = scheduler.CronScheduler(schl, asmlr, default=clock_prgm, user_menu=user_prgm)

print("Starting program")
schdlr.run()
asmlr.start()
time.sleep(1)

try:
    while True:
        if not asmlr.isRunning():
            print("Assembler stopped unexpectedly")
            break
        if not schdlr.isRunning():
            print("Schedluer stopped unexpectedly")
            break
        time.sleep(0.1)
except KeyboardInterrupt:
    print("User requested exit")

asmlr.stop()
schdlr.stop()
